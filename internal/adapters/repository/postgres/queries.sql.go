// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package postgres

import (
	"context"
	"database/sql"
	"time"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (
    id, original_name, size, content_type, storage_key,
    downloads, max_downloads, created_at, expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, original_name, size, content_type, storage_key, downloads, max_downloads, created_at, expires_at
`

type CreateFileParams struct {
	ID           string    `json:"id"`
	OriginalName string    `json:"original_name"`
	Size         int64     `json:"size"`
	ContentType  string    `json:"content_type"`
	StorageKey   string    `json:"storage_key"`
	Downloads    int32     `json:"downloads"`
	MaxDownloads int32     `json:"max_downloads"`
	CreatedAt    time.Time `json:"created_at"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile,
		arg.ID,
		arg.OriginalName,
		arg.Size,
		arg.ContentType,
		arg.StorageKey,
		arg.Downloads,
		arg.MaxDownloads,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.OriginalName,
		&i.Size,
		&i.ContentType,
		&i.StorageKey,
		&i.Downloads,
		&i.MaxDownloads,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const createPaste = `-- name: CreatePaste :one
INSERT INTO pastes (
    id, content, language, title, views, max_views, created_at, expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, content, language, title, views, max_views, created_at, expires_at
`

type CreatePasteParams struct {
	ID        string         `json:"id"`
	Content   string         `json:"content"`
	Language  string         `json:"language"`
	Title     sql.NullString `json:"title"`
	Views     int32          `json:"views"`
	MaxViews  int32          `json:"max_views"`
	CreatedAt time.Time      `json:"created_at"`
	ExpiresAt time.Time      `json:"expires_at"`
}

func (q *Queries) CreatePaste(ctx context.Context, arg CreatePasteParams) (Paste, error) {
	row := q.db.QueryRowContext(ctx, createPaste,
		arg.ID,
		arg.Content,
		arg.Language,
		arg.Title,
		arg.Views,
		arg.MaxViews,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Language,
		&i.Title,
		&i.Views,
		&i.MaxViews,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredFiles = `-- name: DeleteExpiredFiles :exec
DELETE FROM files WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredFiles(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredFiles)
	return err
}

const deleteExpiredPastes = `-- name: DeleteExpiredPastes :exec
DELETE FROM pastes WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredPastes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredPastes)
	return err
}

const getFileByID = `-- name: GetFileByID :one
SELECT id, original_name, size, content_type, storage_key, downloads, max_downloads, created_at, expires_at FROM files WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFileByID(ctx context.Context, id string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.OriginalName,
		&i.Size,
		&i.ContentType,
		&i.StorageKey,
		&i.Downloads,
		&i.MaxDownloads,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getPasteByID = `-- name: GetPasteByID :one
SELECT id, content, language, title, views, max_views, created_at, expires_at FROM pastes WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPasteByID(ctx context.Context, id string) (Paste, error) {
	row := q.db.QueryRowContext(ctx, getPasteByID, id)
	var i Paste
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Language,
		&i.Title,
		&i.Views,
		&i.MaxViews,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const incrementFileDownloads = `-- name: IncrementFileDownloads :exec
UPDATE files SET downloads = downloads + 1 WHERE id = $1
`

func (q *Queries) IncrementFileDownloads(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, incrementFileDownloads, id)
	return err
}

const incrementPasteViews = `-- name: IncrementPasteViews :exec
UPDATE pastes SET views = views + 1 WHERE id = $1
`

func (q *Queries) IncrementPasteViews(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, incrementPasteViews, id)
	return err
}
